// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name AppTemplate
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import DeveloperToolsSupport
import Foundation
import LocationMarketing
@_spi(InternalMapstedAlerts) import MapstedAlerts
import MapstedComponentsCore
import MapstedComponentsUI
@_spi(AlertsPrivateApi) @_spi(InternalCategories) @_spi(InternalUtilities) @_spi(InternalLocationServices) @_spi(InternalPropertyServices) @_spi(InternalImages) @_spi(InternalAnalytics) import MapstedCore
@_spi(InternalLocLiveShare) import MapstedLocationShare
import MapstedMap
import MapstedMapUi
import MapstedTriggersCore
import MessageUI
import SDWebImage
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct SplashScreenInfo {
  public var copyrightInfoText: Swift.String
  public var splashScreenGifLightMode: Swift.String
  public var splashScreenGifDarkMode: Swift.String
  public init(copyrightInfoText: Swift.String, splashScreenGifLightMode: Swift.String, splashScreenGifDarkMode: Swift.String)
}
public enum BaseMapStyle {
  case DARK
  case LIGHT
  case DEFAULT
  public static func == (a: AppTemplate.BaseMapStyle, b: AppTemplate.BaseMapStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ShareInfo {
  public init(headerText: Swift.String, bodyText: Swift.String, storelink_iOS: Swift.String, storeLink_Android: Swift.String, storeLink_Universal: Swift.String? = nil)
}
public struct FirebaseToken {
  public let token: Swift.String
  public let appIdentifier: Swift.String
  public init(token: Swift.String, appIdentifier: Swift.String)
}
@_hasMissingDesignatedInitializers public class AppTemplateParams {
  public static let shared: AppTemplate.AppTemplateParams
  public var menuOptions: AppTemplate.MapstedMenu? {
    get
    set
  }
  public var splashScreenInfo: AppTemplate.SplashScreenInfo?
  public var requireClientLogin: Swift.Bool
  public var enableUserProfiles: Swift.Bool
  public var firebaseOptions: AppTemplate.FirebaseToken
  public var enableStagingSettingMode: Swift.Bool
  public var useMapOverlays: Swift.Bool {
    get
    set
  }
  public var showWelcomeScreen: Swift.Bool
  public var useGeoJSONLayers: Swift.Bool
  public var baseMapStyle: AppTemplate.BaseMapStyle
  public var nameOfGeoJSONStyleAsset: Swift.String
  public var shareInfo: AppTemplate.ShareInfo?
  public func setUpdateVersionPopupDetails(currentAppVersion: Swift.String, appBundleIdentifier: Swift.String, updateNowButtonBgColor: UIKit.UIColor? = nil, updateLaterButtonBgColor: UIKit.UIColor? = nil)
  @objc deinit
}
public enum MapstedMenuItemType : Swift.Int {
  case None
  case Home
  case Buildings
  case Categories
  case Favourites
  case Map
  case NewsFeed
  case Menu
  case Custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SplashScreenPermissionViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static func instantiateViewController() -> AppTemplate.SplashScreenPermissionViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func getBottomMenu() -> AppTemplate.MapstedMenu
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension AppTemplate.SplashScreenPermissionViewController : MapstedMapUi.MapstedPermissionsRequestVCDelegate {
  @_Concurrency.MainActor(unsafe) public func requestPermissionsDidComplete()
}
extension AppTemplate.SplashScreenPermissionViewController : MapstedComponentsUI.LoginViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func loginSuccess()
}
extension AppTemplate.SplashScreenPermissionViewController : UserNotifications.UNUserNotificationCenterDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
}
extension Swift.String : Swift.Error {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ComCodeViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MapstedMenu {
  public static func builder() -> AppTemplate.MapstedMenu
  public func addItem(menuType: AppTemplate.MapstedMenuItemType, icon: UIKit.UIImage? = nil, name: Swift.String? = nil) -> AppTemplate.MapstedMenu
  public func addCustomItem(icon: UIKit.UIImage, name: Swift.String, providerView: UIKit.UIViewController) -> AppTemplate.MapstedMenu
  public func build() -> AppTemplate.MapstedMenu
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LaunchViewController : AppTemplate.ComCodeViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension AppTemplate.LaunchViewController : MapstedComponentsUI.PropertiesListViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func selectProperty(propertyInfo: MapstedCore.PropertyInfo)
}
extension AppTemplate.LaunchViewController : MapstedCore.MNDeepLinkDelegate {
  @_Concurrency.MainActor(unsafe) public func processDeepLink(uri: Foundation.URL, completion: ((Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func processDeepLink(path: Swift.String, params: [Foundation.URLQueryItem]?, completion: ((Swift.Bool) -> Swift.Void)?)
}
extension AppTemplate.LaunchViewController : MapstedTriggersCore.MapstedNotificationDelegate {
  @_Concurrency.MainActor(unsafe) public func navigateToMap(homeEntities: [MapstedCore.HomeEntity])
  @_Concurrency.MainActor(unsafe) public func openWebsite(websiteURL: Swift.String) -> Swift.Bool
}
extension AppTemplate.LaunchViewController : MapstedTriggersCore.MarketingBannerActionDelegate {
  @_Concurrency.MainActor(unsafe) public func showCampaign(campaignId: Swift.String, propertyId: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func showAlert(propertyId: Swift.Int, alertId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func showEmergencyAlert(alertId: Swift.String)
}
extension AppTemplate.BaseMapStyle : Swift.Equatable {}
extension AppTemplate.BaseMapStyle : Swift.Hashable {}
extension AppTemplate.MapstedMenuItemType : Swift.Equatable {}
extension AppTemplate.MapstedMenuItemType : Swift.Hashable {}
extension AppTemplate.MapstedMenuItemType : Swift.RawRepresentable {}
